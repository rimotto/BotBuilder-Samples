<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bot.Expressions.Properties</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Bot.Expressions.Properties.ArrayExpression`1">
            <summary>
            ArrayExpression - represents a property which is either a value of array of T or a string expression to bind to a array of T.
            </summary>
            <typeparam name="T">type of object in the array.</typeparam>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ArrayExpression`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.ArrayExpression`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ArrayExpression`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="value">collection of (T).</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ArrayExpression`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="expression">expression which evaluates to array.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ArrayExpression`1.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.ArrayExpression`1"/> class.
            </summary>
            <param name="value">JToken which is either a collection of (T) or expression which evaluates to array.</param>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.BoolExpression">
            <summary>
            BoolExpression - represents a property which is either a boolean or a string expression which resolves to a boolean.
            </summary>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.BoolExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.BoolExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.BoolExpression.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="value">bool value.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.BoolExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="expression">expression to resolve to bool.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.BoolExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.BoolExpression"/> class.
            </summary>
            <param name="value">expression or value to resolve to bool.</param>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.Converters.ArrayExpressionConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The type of the items of the array.</typeparam>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.Converters.BoolExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.Converters.EnumExpressionConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The enum type to construct.</typeparam>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.Converters.ExpressionPropertyConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The property type to construct.</typeparam>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.Converters.IntExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.Converters.NumberExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.Converters.ObjectExpressionConverter`1">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
            <typeparam name="T">The property type to construct.</typeparam>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.Converters.StringExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.Converters.ValueExpressionConverter">
            <summary>
            Converter which allows json to be expression to object or static object.
            </summary>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.EnumExpression`1">
            <summary>
            EnumExpression - represents a property which is either a enum(T) or a string expression which resolves to a enum(T).
            </summary>
            <typeparam name="T">type of enum.</typeparam>
            <remarks>String values are always interpreted as an enum, unless it has '=' prefix in which case it is evaluated as a expression.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.EnumExpression`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.EnumExpression`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.EnumExpression`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="value">value of T.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.EnumExpression`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="expression">expression to resolve to an enum.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.EnumExpression`1.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.EnumExpression`1"/> class.
            </summary>
            <param name="value">jtoken value to resolve to an enum.</param>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.ExpressionProperty`1">
            <summary>
            Base class which defines a Expression or value for a property.
            </summary>
            <typeparam name="T">type of object the expression should evaluate to.</typeparam>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ExpressionProperty`1.ToExpression">
            <summary>
            This will return the existing expression or ConstantExpression(Value) if the value is non-complex type.
            </summary>
            <returns>expression.</returns>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ExpressionProperty`1.GetValue(System.Object)">
            <summary>
            Get the value.
            </summary>
            <param name="data">data to use for expression binding.</param>
            <returns>value or default(T) if not found.</returns>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ExpressionProperty`1.TryGetValue(System.Object)">
            <summary>
            try to Get the value.
            </summary>
            <param name="data">data to use for expression binding.</param>
            <returns>value.</returns>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ExpressionProperty`1.SetValue(System.Object)">
            <summary>
            Set the value.
            </summary>
            <param name="value">value to set.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ExpressionProperty`1.ConvertObject(System.Object)">
            <summary>
            Convert raw object to desired value type.
            </summary>
            <remarks>
            This method is called whenever an object is fected via expression or is deserialized from raw text.
            </remarks>
            <param name="result">result to convert to object of type T.</param>
            <returns>object of type T.</returns>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.Extensions">
            <summary>
            Extension methods for AdaptiveDialog.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.Extensions.Evaluate(Microsoft.Bot.Builder.LanguageGeneration.LGFile,System.String,System.Object)">
            <summary>
            Use to evaluate an inline template str.
            </summary>
            <param name="lgFile">lg file.</param>
            <param name="inlineStr">inline string which will be evaluated.</param>
            <param name="scope">scope object or JToken.</param>
            <returns>Evaluate result.</returns>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.IntExpression">
            <summary>
            IntExpression - represents a property which is either an Integer or a string expression which resolves to a Integer.
            </summary>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.IntExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.IntExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.IntExpression.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.IntExpression"/> class.
            </summary>
            <param name="value">value to return.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.IntExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.IntExpression"/> class.
            </summary>
            <param name="expression">string expression to resolve to an int.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.IntExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.IntExpression"/> class.
            </summary>
            <param name="value">JToken to resolve to an int.</param>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.NumberExpression">
            <summary>
            NumberExpression - represents a property which is either a float or a string expression which resolves to a float.
            </summary>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.NumberExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.NumberExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.NumberExpression.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="value">value to use.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.NumberExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="expression">string to interpret as expression or number.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.NumberExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.NumberExpression"/> class.
            </summary>
            <param name="value">jtoken to interpret as expression or number.</param>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.ObjectExpression`1">
            <summary>
            ObjectExpression(T) - represents a property which is either an object of type T or a string expression which resolves to a object of type T.
            </summary>
            <typeparam name="T">the type of object.</typeparam>
            <remarks>String values are always interpreted as an expression, whether it has '=' prefix or not.</remarks>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.StringExpression">
            <summary>
            StringExpression - represents a property which is either a string value or a string expression.
            </summary>
            <remarks>
            If the value is 
            * a string with '=' prefix then the string is treated as an expression to resolve to a string. 
            * a string without '=' then value is treated as string with string interpolation.
            * You can escape the '=' prefix by putting a backslash.  
            Examples: 
                prop = "Hello @{user.name}" => "Hello Joe"
                prop = "=length(user.name)" => "3"
                prop = "=user.name" => "Joe"
                prop = "\=user" => "=user".
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.StringExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.StringExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.StringExpression.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.StringExpression"/> class.
            </summary>
            <param name="valueOrExpression">string to interpret as string or expression to a string.</param>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.StringExpression.#ctor(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.StringExpression"/> class.
            </summary>
            <param name="value">value to interpret as a string or expression to a string.</param>
        </member>
        <member name="T:Microsoft.Bot.Expressions.Properties.ValueExpression">
            <summary>
            ValueExpression - represents a property which is an object of any kind or a string expression.
            </summary>
            <remarks>
            If the value is 
            * a string with '=' prefix then the string is treated as an expression to resolve to a string. 
            * a string without '=' then value is treated as string with string interpolation.
            * any other type, then it is of that type (int, bool, object, etc.)
            You can escape the '=' prefix by putting a backslash.  
            Examples: 
                prop = true ==> true
                prop = "Hello @{user.name}" => "Hello Joe"
                prop = "=length(user.name)" => 3
                prop = "=user.age" => 45.
                prop = "\=user.age" => "=user.age".
            </remarks>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ValueExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.ValueExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Bot.Expressions.Properties.ValueExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Bot.Expressions.Properties.ValueExpression"/> class.
            </summary>
            <param name="value">value to interpret as object or string expression.</param>
        </member>
    </members>
</doc>
